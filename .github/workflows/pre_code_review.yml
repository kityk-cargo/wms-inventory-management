name: Pre-Code Review Pipeline

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

env:
  LIQUIBASE_VERSION: "4.31.0"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout wms-inventory-management repo
        uses: actions/checkout@v3

      - name: Checkout wms-main repo
        uses: actions/checkout@v3
        with:
          repository: kityk-cargo/wms-main
          path: ./wms-main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          flake8 .

      - name: Check formatting with black
        run: |
          black --check .

      - name: Type check with mypy
        run: |
          mypy .

      - name: Run unit tests
        run: |
          pytest tests/unit --maxfail=0 --disable-warnings

      - name: Pull Liquibase Image (TODO remove if possible)
        run: docker pull liquibase/liquibase:${{ env.LIQUIBASE_VERSION }}

      - name: Run integration tests
        env:
          LIQUIBASE_CHANGELOG_HOST: ./wms-main/liquibase
          TESTCONTAINERS_RYUK_DISABLED: "true"
          LIQUIBASE_VERSION: ${{ env.LIQUIBASE_VERSION }}
        run: |
          pytest tests/integration -s --maxfail=0 --disable-warnings

      - name: Checkout wms-contracts repository
        uses: actions/checkout@v3
        with:
          repository: kityk-cargo/wms-contracts
          path: wms-contracts

      - name: Set environment variable for Pact directory
        run: echo "PACT_DIR_PATH=$(pwd)/wms-contracts/pact/rest/wms_inventory_management" >> $GITHUB_ENV

      - name: Run contract tests
        run: |
          pytest tests/contract -s --maxfail=0 --disable-warnings -m contract
        env:
          PACT_DIR_PATH: ${{ env.PACT_DIR_PATH }}

      # New step: Save Pact files to transient branch
      - name: Save Pact files to transient branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -B pacts-transient-do_not_touch
          git add -f ./pacts/*
          git commit -m "Update transient pact files" || echo "No changes to commit"
          git push -f origin pacts-transient-do_not_touch
